Maze Algorithm/** *  * @author L Richard Shannon * This class builds and runs a mouse trap maze * Step one(setup maze) * The user is asked to input the size of the maze * width then depth * Calculate total number of cells and calculate 25% of them * This is the max number of traps the user can enter * (traps kill mice) * This is also the max number of mouse holes the user can enter * (mouse holes allow mice to jump around the maze and escape) * Print out the maze including the location of traps and holes. * Step two(run maze) * enter move loop * mouse is queried for current location * mouse is queried for move direction (2 digit array {-1,-1},{0,-1},...{1,1}) * direction is checked against current location to determine if the move is valid. * if mouse moves off the edge the mouse restarts.  I do not worry about the mouse moving backwards in this version. * new location is saved in the mouse's path * Check for mouse hole from mouse hole ArrayList. * If mouse hole, check to see if mouse can escape. * 		Mouse escapes if one of the prime numbers is generated in the HALFPRIME array *    Then a new mouse is started at the beginning. * If the mouse does not escape, a random number is generated equal to one of the indexes  *     in the mouseHole ArrayList.  *     The mouses location is changed to the location of this mouse hole. * Next the location of the mouse is checked against the cell location *   for a mouse trap.   * If the cell contains a mouse trap the mouse is killed  * 		and a new mouse is release from the beginning cell. * 		The mouse trap adds the dead mouse to it's list of the dead *  * exit loop when mouse a is at maxWidth and maxDepth corner. * Print the successful mouse's path. * Print the total number of mouse restarts. * Print the total number of mouse dead. * Print the total number of dead per trap. * Print the total number of escapees.  *  */